<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	
	<!--annotation-driven으로 만들어지는 것들 
		1. HandlerMapping : 컨트롤러@Controller(POJO) 객체와 핸들러@RequestMapping 메소드를 검색하고, 해당 정보로 map 을 형성.
		2. HandlerAdapter : 핸들러 메소드의 호출자
			- HandlerMethodArgumentResovler : 핸들러 메소드의 인자를 해결하기 위한 전략.
			- HandlerMethodReturnValueHandler : 핸들러 메소드내에서 반환되는 객체를 처리하는 전략.
		3. ViewResolver : 핸들러 메소드내에서 결정된 뷰에 대한 정보(logical view name)을 해결하는 전략. //이건 꼭 커스터마이징 해야함.
	 -->
	 <!-- 이걸쓰면 그냥 바로 HV바로 연동되는데 직접만든거는 연결 안되있음 -->
	<mvc:annotation-driven validator="validator"/>
	<!-- 
		검증을 하는 부분은 HandlerAdapter 여기에서함
		그런데 HandlerAdapter를 annotation-driven에서 등록함.
		그래서 여기에서 validator="validator" 설정해주는거임
	 -->
	
	<!-- 직접만든거 연결하기 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basenames="kr.or.ddit.message.ErrorMessages"
	/>
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"
		p:validationMessageSource-ref="messageSource"
	/>
	
	<context:component-scan base-package="kr.or.ddit" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 객체를 미리 생성해놓아야 찾을 수 있음//jsonView -->
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"></bean>
	<!-- BeanNameViewResolver 등록 : 뷰네임과 매칭 되는 빈의 id가 있으면, 해당 빈을 뷰레이어로 사용함. -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="1"
	/>
	<mvc:tiles-configurer>
		<mvc:definitions location="/WEB-INF/tiles/*-tiles.xml"/>
	</mvc:tiles-configurer>
	<mvc:view-resolvers order="2">
		<!-- 이걸쓰면 우선순위 상관없어짐 // <mvc:bean-name/> 이거를 따로 뺴서 바로 객체로 직접 등록함 -->
		<mvc:content-negotiation>
			<mvc:default-views>
				<ref bean="jsonView"/> 
			</mvc:default-views>
		</mvc:content-negotiation>
		<mvc:tiles/>
		<!-- InternalResourceViewResolver 등록 : html / jsp 와 같은 휠 리소스를 뷰레이어로 사용함. -->
		<mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp"/> <!-- 우선순위 제일 마지막에 : 못찾으면 그냥 404해버리기때문에 -->
	</mvc:view-resolvers>
	
	<!-- 필터대용 : 필터는 스프링이 관리못하지만 interceptor는 필터처럼 사용할수 있고 스프링이 관리 가능 -->
	<!-- localeResolver id 이렇게 주면 아래에서 알아서 찾아서 함 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		p:cookieName="localeCookie"
		p:cookiePath="/"
		p:cookieMaxAge="#{60*60*24*3}"
	/>
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- 필터면 /*가 전체매핑이 맞지만 스프링은 /** 해줘야함 -->
			<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
				p:paramName="lang"
			/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- multipartResolver이름을 이렇게 설정해놓은면 위에있는 mvc:annotation-driven 얘가 알아서 찾아서 씀 -->
	<!-- MultipartResolver : multipart 요청을 파싱해서 문자 기반의 파트는 parameter 로 만들고
												   file 기반의 파트는 MultipartFile 타입 객체로 캡슐화함.
							>> MultipartHttpServletRequest wrapper request 를 생성함.		    -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	/>
	
	
	<!-- /resources/** >> **에 붙는 경로가 /resources/ 이 뒤로 붙어서 실제로 자원을 연결해줌/ 캐싱 처리 알아서 해줌 -->
	<mvc:resources location="/resources/" mapping="/resources/**" cache-period="0"></mvc:resources>
	
</beans>

